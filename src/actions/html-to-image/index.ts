import {readFileSync} from 'node:fs';import {resolve} from 'node:path';import { createBrowser } from '../../shared/helpers/create-browser';function splitIntoSections(html: string, maxSections: number = 30): string[][] {  const regex = /<b><u>[\s\S]*?<\/blockquote>/g;  const matches = html.match(regex) || [];  const pages: string[][] = [];  let current: string[] = [];  let lineCount = 0;  for (const block of matches) {    const blockLines = block.split("\n").length;    if (lineCount + blockLines > maxSections && current.length > 0) {      pages.push(current);      current = [];      lineCount = 0;    }    current.push(block);    lineCount += blockLines;  }  if (current.length > 0) pages.push(current);  return pages;}async function htmlToImage(htmlContent: string) {  const browser = await createBrowser();  const page = await browser.newPage();  const cssPath = resolve(__dirname, 'styles.css');  const cssContent = readFileSync(cssPath, 'utf8');  const sections = splitIntoSections(htmlContent, 30);  const screenshots: Buffer[] = [];  for (const pageSections of sections) {    const finalHtml = `    <html lang="ru">      <head>        <style>${cssContent}</style>      </head>      <body>        <div class="content">          ${pageSections.join("\n")}        </div>      </body>    </html>`;    await page.setContent(finalHtml, { waitUntil: 'networkidle0' });    await page.setViewport({ width: 768, height: 324 });    const screenshot = Buffer.from(      await page.screenshot({ fullPage: true, type: 'png' }) as Uint8Array    );    screenshots.push(screenshot);  }  await browser.close();  return screenshots;}export { htmlToImage };